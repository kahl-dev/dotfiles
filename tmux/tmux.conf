# set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"

# Based on followed tut
# https://github.com/samoshkin/tmux-config
# https://medium.freecodecamp.org/tmux-in-practice-series-of-posts-ae34f16cfab0

### General settings {{{

set -g default-terminal 'tmux-256color'
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on
setw -g xterm-keys on

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a
bind a send-prefix

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

set -g focus-events on

# }}}

### Key bindings {{{

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
# unbind }    # swap-pane -D
# unbind {    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# resize panes like vim
# bind-key -r < resize-pane -L 5
# bind-key -r > resize-pane -R 5
# bind-key -r + resize-pane -U 5
# bind-key -r = resize-pane -D 5
bind-key -r Left resize-pane -L 5
bind-key -r Down resize-pane -D 5
bind-key -r Up resize-pane -U 5
bind-key -r Right resize-pane -R 6

# Edit configuration and reload
bind e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind l unbind-key -a \; source-file ~/.tmux/.tmux.reset.conf \; source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
bind z resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind C-w if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# fzf
bind s split-window -v "tmux list-sessions -F '#S' | fzf --reverse | xargs tmux switch-client -t"
bind w split-window -v "tmux list-window -F '#W' | fzf --reverse | xargs tmux select-window -t"

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-h if -F '#{s/off//:status}' 'set status off' 'set status on'

# Move windows
# https://superuser.com/questions/343572/how-do-i-reorder-tmux-windows#answer-552493
bind -n C-S-Left swap-window -t -1\; select-window -t -1
bind -n C-S-Right swap-window -t +1\; select-window -t +1

# https://stackoverflow.com/questions/5609192/how-to-set-up-tmux-so-that-it-starts-up-with-specified-windows-opened
bind -n ¡  \
  send-keys 'vim' C-m \; \
  split-window -v -c "#{pane_current_path}" -p 20 \; \
  select-pane -t 1 \; \
  split-window -h -c "#{pane_current_path}" -p 47 \; \
  send-keys 'gsb' C-m \; \
  select-pane -t 1 \; \
  display "Create Default Layout 01"

# }}}

### Window monitoring for activity and silence {{{

bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# }}}

### Copy mode, scroll and clipboard {{{

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

bind-key y run-shell "tmux save-buffer - | nc -N 127.0.0.1 8377"
yank="nc -N 127.0.0.1 8377"

# Copy selected text
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
#
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi Y send-keys -X copy-line \;\
#     run "tmux save-buffer - | $yank"
# bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
#     run "tmux save-buffer - | $yank"
# bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
# bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
#     run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# }}}

### Appearence and status bar {{{

# Icons
# Find Icons: https://www.nerdfonts.com/cheat-sheet

zoom="#{?window_zoomed_flag, ,}"
dl=""
dr=""

c_ia_color="#[fg=colour04]#[bg=colour19]"
c_a_color="#[fg=colour18]#[bg=colour14]"

set -g @cpu_low_fg_color "#[fg=colour07]"
set -g @cpu_medium_fg_color "#[fg=yellow]"
set -g @cpu_high_fg_color "#[fg=red]"

set -g @cpu_medium_thresh "30"
set -g @cpu_high_thresh "80"

set -g @ram_low_fg_color "#[fg=colour07]"
set -g @ram_medium_fg_color "#[fg=yellow]"
set -g @ram_high_fg_color "#[fg=red]"

set -g @ram_medium_thresh "30"
set -g @ram_high_thresh "80"

status_r_off="#([ $(tmux show-option -qv key-table) = 'off' ] && echo '$status_r_is_disabled' || echo '')"
status_os="#([ $(uname 2> /dev/null) = 'Darwin' ] && echo '' || echo ' $HOST') $HOST"
status_r_cpu="#[fg=colour19]#[bg=colour18]$dr#[bg=colour19] #{cpu_fg_color} CPU: #{cpu_icon} #{cpu_percentage} #[fg=colour18]#[bg=colour19]$dr"
status_r_ram="#[fg=colour19]#[bg=colour18]$dr#[bg=colour19] #{ram_fg_color} RAM: #{ram_icon} #{ram_percentage} #[fg=colour18]#[bg=colour19]$dr"
status_r_is_disabled="#[fg=colour01]$dr#[bg=colour01]#[fg=colour07] OFF #[fg=colour18]#[bg=colour01]$dr"
status_r_cal="#[fg=colour19]#[bg=colour18]$dr#[bg=colour19]#[fg=colour07] %d %b  "
status_r_color="#{?client_prefix,#[fg=colour01],#[fg=colour10]}$dr#{?client_prefix,#[bg=colour02],#[bg=colour10]}#[fg=colour0] %H:%M  "

tmux_session=" #{?client_prefix,#[bg=colour01],#[bg=colour10]} #[fg=colour0]$status_os #S #{?client_prefix,#[fg=colour01],#[fg=colour10]} #[bg=colour10]#[bg=colour18]$dl"

# Is active window index 1
is_first="#([ $(tmux display-message -p '#I') = $(tmux show-options -gqv base-index) ] && echo true)"
is_last="#( [ $(tmux display-message -p '#I') = $(tmux list-windows | tail -n1 | sed 's/\:.*//') ] && echo true )"

# Refresh status line every 5 seconds - Good for when music is playing / update time etc
set -g status-interval 5

# Start window and pane indices at 1.
set -g base-index 1
set -g pane-base-index 1

# length of tmux status line
set -g status-left-length 30
set -g status-right-length 150

# Make active pane border blue
set -g pane-active-border-style "bg=colour05 fg=colour04"

#Set the left and right status
set -g status-left "$tmux_session"
set -g status-right "$status_r_off$status_r_cpu$status_r_ram$status_r_cal$status_r_color"

# Set the background color
set -g status-bg colour18

set -gw window-status-separator ""

# customize how windows are displayed in the status line
set -gw window-status-format "#[fg=colour18]#[bg=colour19]$dl $c_ia_color #I #[bg=colour19]$c_ia_color$zoom #W #F #[fg=colour19]#[bg=colour18]$dl"
set -gw window-status-current-format "#[fg=colour18]#[bg=colour14]$dl $c_a_color #I #[bg=colour14]$c_a_color$zoom #W #F #[fg=colour14]#[bg=colour18]$dl"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# }}}

### Renew environment {{{

set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# }}}

### Plugins {{{

# https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tpm'

# https://github.com/tmux-plugins/tmux-copycat
# set -g @plugin 'tmux-plugins/tmux-copycat'

# https://github.com/tmux-plugins/tmux-open
# set -g @plugin 'tmux-plugins/tmux-open'

# https://github.com/samoshkin/tmux-plugin-sysstat
# set -g @plugin 'samoshkin/tmux-plugin-sysstat'

set -g @plugin 'tmux-plugins/tmux-cpu'

# https://github.com/christoomey/vim-tmux-navigator
set -g @plugin 'christoomey/vim-tmux-navigator'

# https://github.com/mshkrebtan/base16-tmux
set -g @plugin 'mshkrebtan/base16-tmux'

# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'

# https://github.com/tmux-plugins/tmux-continuum
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-save-interval '15'
set -g @continuum-restore 'on'

# A tmux plugin for opening urls from browser quickly without mouse.
# Doc: https://github.com/wfxr/tmux-fzf-url
set -g @plugin 'wfxr/tmux-fzf-url'
# set -g @fzf-url-bind 'u'

# Plugin properties
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'

set -g @open-S 'https://www.google.com/search?q='

# }}}

### Nesting local and remote sessions {{{

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  refresh-client -S

# }}}

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
