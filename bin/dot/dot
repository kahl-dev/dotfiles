#!/usr/bin/env bash
# This script was generated by bashly 1.1.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dot_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot - .Dotfiles helper\n"
    echo

  else
    printf "dot - .Dotfiles helper\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot COMMAND\n"
  printf "  dot [COMMAND] --help | -h\n"
  printf "  dot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Edit .dotfiles in your favorite editor (neovim)\n" "edit  "
  printf "  %s   Update all dependencies and handlet apps/bin etc (brew, lazyvim, ...)\n" "update"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
dot_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot edit - Edit .dotfiles in your favorite editor (neovim)\n"
    echo

  else
    printf "dot edit - Edit .dotfiles in your favorite editor (neovim)\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot edit\n"
  printf "  dot edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dot_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot update - Update all dependencies and handlet apps/bin etc (brew, lazyvim, ...)\n"
    echo

  else
    printf "dot update - Update all dependencies and handlet apps/bin etc (brew, lazyvim, ...)\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot update [OPTIONS]\n"
  printf "  dot update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--yes, -y"
    printf "    Confirm all with yes\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/sample_function.sh
ZDOTDIR=$HOME/.config/zsh
DOTFILES=$HOME/.dotfiles

# Colors
COLOR_RED=$'\033[31;1m'
COLOR_CYAN=$'\033[0;36m'
COLOR_BLUE=$'\033[0;34m'
COLOR_YELLOW=$'\033[1;33m'
COLOR_OFF=$'\033[0m'

_exec_exists() {
	command -v "$1" >/dev/null 2>&1
}

_is_osx() {
	[[ $(uname -s) =~ "Darwin" ]] && return 0 || return 1
}

# :command.command_functions
# :command.function
dot_edit_command() {
  # src/edit_command.sh
  # Check if the DOTFILES variable is set
  if [ -z "$DOTFILES" ]; then
  	echo "The DOTFILES variable is not set."
  	exit 1
  fi

  # Check if the EDITOR variable is set
  if [ -z "$EDITOR" ]; then
  	echo "The EDITOR variable is not set. Defaulting to vim."
  	EDITOR="vim" # Default to vim if EDITOR is not set
  fi

  # Use the editor specified in the EDITOR variable to open the path in DOTFILES
  $EDITOR "$DOTFILES"

}

# :command.function
dot_update_command() {
  # src/update_command.sh
  yes=${args[--yes]}

  cd $DOTFILES

  if [[ $yes == 1 ]]; then
  	all_yes=1
  fi

  if _exec_exists nvim; then
  	if [[ $all_yes == 1 ]] || (read -p "Do you want to update LazyVim? (y/n) " response && [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]); then
  		printf "${COLOR_CYAN}Update LazyVim${COLOR_OFF}\n"
  		nvim --headless '+Lazy! sync' +qa
  	fi

  	printf "${COLOR_CYAN}Please also update Mason LSPs manualy${COLOR_OFF}\n"
  fi

  if _exec_exists brew; then
  	if [[ $all_yes == 1 ]] || (read -p "Do you want to update Homebrew packages? (y/n) " response && [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]); then
  		printf "${COLOR_CYAN}Update Homebrew packages${COLOR_OFF}\n"
  		brew update
  		brew upgrade
  		brew cleanup -s
  		#now diagnotic
  		# brew doctor
  		# brew missing
  	fi
  fi

  echo _is_osx

  if _is_osx; then
  	if [[ $all_yes == 1 ]] || (read -p "Do you want to update App Store packages with mas? (y/n) " response && [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]); then
  		printf "${COLOR_CYAN}Update App Store packages with mas${COLOR_OFF}\n"
  		mas upgrade
  	fi

  	if [[ $all_yes == 1 ]] || (read -p "Do you want to update the System? (y/n) " response && [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]); then
  		printf "${COLOR_CYAN}Update System${COLOR_OFF}\n"
  		softwareupdate -i -a
  	fi
  fi

  printf "${COLOR_CYAN}node and npm packages has to be updated manually${COLOR_OFF}\n"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    edit)
      action="edit"
      shift
      dot_edit_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      dot_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dot_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dot_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "edit") dot_edit_command ;;
    "update") dot_update_command ;;
  esac
}

initialize
run "$@"
