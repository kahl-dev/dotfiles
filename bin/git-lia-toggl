#!/bin/bash

# Define valid types for command-line validation
VALID_TYPES=('feat' 'fix' 'docs' 'style' 'refactor' 'test' 'chore')

get_ticket_id_from_toggl() {
	# Get the Toggl API token from the environment variable
	local TOGGL_API_TOKEN="${T}"

	if [[ -z "${TOGGL_API_TOKEN}" ]]; then
		echo "Error: Toggl API token is not set in the T environment variable." >&2
		return 1
	fi

	# Execute the curl command
	local RESPONSE=$(curl -s "https://api.track.toggl.com/api/v9/me/time_entries/current" \
		-H "Content-Type: application/json" \
		-u "${TOGGL_API_TOKEN}:api_token")

	# Extract the ticket ID
	local TICKET_ID=$(echo "${RESPONSE}" | grep -oE "[A-Z]+-[0-9]+")

	if [[ -z "$TICKET_ID" ]]; then
		echo "Error: Could not fetch Toggl ticket ID. Aborting." >&2
		return 1
	fi

	echo "${TICKET_ID}"
}

# Main script logic
TYPE=''
MESSAGE=''

# Check for valid type as the first argument
if [[ " ${VALID_TYPES[*]} " =~ " $1 " ]]; then
	TYPE="$1"
	shift # Remove the first argument if it's a type
fi

MESSAGE="$*"

SCOPE=$(get_ticket_id_from_toggl)
if [[ $? -ne 0 ]]; then
	echo "Error: Unable to retrieve Toggl ticket ID." >&2
	exit 1
fi

if [[ -z "$SCOPE" ]]; then
	echo "Error: No Toggl ticket ID found. Aborting commit." >&2
	exit 1
fi

# Construct the git-lia commit command dynamically
CMD="git-lia commit -s \"$SCOPE\""

# Include type in the command if provided
if [[ -n "$TYPE" ]]; then
	CMD+=" -t \"$TYPE\""
fi

# Include message in the command if provided
if [[ -n "$MESSAGE" ]]; then
	CMD+=" -m \"$MESSAGE\""
fi

# Execute the command
eval $CMD
