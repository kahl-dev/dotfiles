#!/usr/bin/env bash
# Universal Clipboard Handler
# Handles clipboard operations across local, remote, and nested tmux sessions
# Supports any level of nesting: Local tmux → SSH → Remote tmux → SSH → Another remote tmux

set -euo pipefail

# Debug mode - set CLIPBOARD_DEBUG=1 to enable
DEBUG=${CLIPBOARD_DEBUG:-0}
debug() {
    [[ $DEBUG -eq 1 ]] && echo "[CLIPBOARD DEBUG] $*" >&2
}

# Detect session context
detect_context() {
    local ssh_hops=0
    local tmux_level=0
    local is_remote=0
    
    # Count SSH hops
    if [[ -n "${SSH_CLIENT:-}" ]] || [[ -n "${SSH_TTY:-}" ]] || [[ -n "${SSH_CONNECTION:-}" ]]; then
        is_remote=1
        ssh_hops=1
        debug "Detected SSH session"
        
        # Count additional SSH environment variables that indicate nested SSH
        if [[ -n "${SSH_AUTH_SOCK:-}" ]]; then
            debug "SSH agent forwarding detected"
        fi
    fi
    
    # Count tmux nesting level
    if [[ -n "${TMUX:-}" ]]; then
        # Count how many tmux sessions we're nested in
        local tmux_var="$TMUX"
        while [[ -n "$tmux_var" ]]; do
            ((tmux_level++))
            # Check for nested tmux by looking at parent processes
            local parent_tmux=$(pgrep -f "tmux.*$(echo "$tmux_var" | cut -d, -f1)" 2>/dev/null | head -1)
            if [[ -n "$parent_tmux" ]]; then
                debug "Found tmux level $tmux_level"
                # This is simplified - in reality detecting true nesting is complex
                break
            else
                break
            fi
        done
        debug "Tmux nesting level: $tmux_level"
    fi
    
    echo "ssh_hops=$ssh_hops tmux_level=$tmux_level is_remote=$is_remote"
}

# Send text via OSC 52 sequence
send_osc52() {
    local text="$1"
    local encoded
    
    # Base64 encode the text
    encoded=$(printf '%s' "$text" | base64 | tr -d '\n')
    
    # Send OSC 52 sequence
    # The sequence: ESC]52;c;BASE64_TEXT\007
    printf '\033]52;c;%s\007' "$encoded"
    
    debug "Sent OSC 52 sequence (${#encoded} chars)"
}

# Main clipboard copy function
copy_to_clipboard() {
    local text="$1"
    
    # Read context
    eval "$(detect_context)"
    
    debug "Context: remote=$is_remote, tmux_level=$tmux_level, ssh_hops=$ssh_hops"
    
    # Strategy: Always try multiple methods for maximum compatibility
    
    # Method 1: Local clipboard (if available)
    if [[ $is_remote -eq 0 ]] && command -v pbcopy >/dev/null 2>&1; then
        printf '%s' "$text" | pbcopy
        debug "Copied to local pbcopy"
    fi
    
    # Method 2: OSC 52 (works through SSH and nested tmux)
    send_osc52 "$text"
    
    # Method 3: tmux buffer (for local tmux integration)
    if [[ -n "${TMUX:-}" ]]; then
        printf '%s' "$text" | tmux load-buffer -
        debug "Loaded to tmux buffer"
    fi
    
    # Method 4: X11 clipboard (Linux)
    if command -v xclip >/dev/null 2>&1; then
        printf '%s' "$text" | xclip -selection clipboard
        debug "Copied to X11 clipboard"
    elif command -v xsel >/dev/null 2>&1; then
        printf '%s' "$text" | xsel --clipboard --input
        debug "Copied to X11 clipboard (xsel)"
    fi
    
    debug "Clipboard copy completed"
}

# Main function
main() {
    local text=""
    
    # Read from stdin if no arguments
    if [[ $# -eq 0 ]]; then
        text=$(cat)
    else
        text="$*"
    fi
    
    # Remove trailing newline if present (common issue with copy operations)
    text="${text%$'\n'}"
    
    if [[ -z "$text" ]]; then
        debug "No text to copy"
        exit 0
    fi
    
    copy_to_clipboard "$text"
}

# Run main function
main "$@"