- defaults:
    link:
      relink: true
      create: true
    shell:
      quiet: false
      stderr: true

- clean: []

- link: {}

- shell:
    - description: "Clone claude-store repository"
      command: |
        if [ ! -d "$HOME/.claude.store" ]; then
          echo "Cloning claude-store repository..."
          git clone git@github.com:kahl-dev/.claude.store.git "$HOME/.claude.store"
        else
          echo "Claude-store repository already exists"
          cd "$HOME/.claude.store"
          git pull origin main
        fi

    - description: "Backup existing ~/.claude data if present"
      command: |
        if [ -d "$HOME/.claude" ] && [ ! -L "$HOME/.claude" ]; then
          echo "Backing up existing ~/.claude directory..."
          BACKUP_DIR="$HOME/.claude.backup.$(date +%Y%m%d_%H%M%S)"
          cp -r "$HOME/.claude" "$BACKUP_DIR"
          echo "Backup created at: $BACKUP_DIR"
          
          # Also preserve the backup location for potential restore
          echo "$BACKUP_DIR" > "$HOME/.claude.store/.last_backup_location"
        elif [ -L "$HOME/.claude" ]; then
          echo "~/.claude is already a symlink, no backup needed"
        else
          echo "No existing ~/.claude directory found"
        fi

    - description: "Migrate existing data to claude-store structure"
      command: |
        if [ -f "$HOME/.claude.store/.last_backup_location" ]; then
          BACKUP_DIR=$(cat "$HOME/.claude.store/.last_backup_location")
          if [ -d "$BACKUP_DIR" ]; then
            echo "Migrating data from backup to claude-store..."
            
            # Ensure target directory exists
            mkdir -p "$HOME/.claude.store/user-level"
            
            # Copy all content from backup to user-level directory
            # Use rsync to preserve permissions and handle conflicts gracefully
            if command -v rsync >/dev/null 2>&1; then
              rsync -av --update "$BACKUP_DIR/" "$HOME/.claude.store/user-level/"
            else
              # Fallback to cp if rsync not available
              cp -r "$BACKUP_DIR/"* "$HOME/.claude.store/user-level/" 2>/dev/null || true
            fi
            
            echo "Data migration completed"
            
            # Verify migration success
            if [ -d "$HOME/.claude.store/user-level" ]; then
              echo "‚úÖ Migration verification: user-level directory exists"
              echo "   Files in user-level: $(ls -la "$HOME/.claude.store/user-level" | wc -l) items"
            fi
          fi
        fi

    - description: "Create safe symlink for claude directory"
      command: |
        # Only remove ~/.claude if backup was successful or it's already a symlink
        if [ -L "$HOME/.claude" ]; then
          rm "$HOME/.claude"
          echo "Removed existing symlink"
        elif [ -d "$HOME/.claude" ] && [ -f "$HOME/.claude.store/.last_backup_location" ]; then
          rm -rf "$HOME/.claude"
          echo "Removed original directory (backup preserved)"
        fi
        
        # Create new symlink
        ln -sf "$HOME/.claude.store/user-level" "$HOME/.claude"
        
        # Verify symlink creation
        if [ -L "$HOME/.claude" ] && [ -d "$HOME/.claude" ]; then
          echo "‚úÖ Created symlink: ~/.claude -> ~/.claude.store/user-level"
        else
          echo "‚ùå Failed to create symlink"
          exit 1
        fi

    - description: "Update hostname in configuration"
      command: |
        # Update hostname in existing config.json
        cd "$HOME/.claude.store"
        if [ -f "config.json" ]; then
          jq --arg hostname "$(hostname)" '.hostname = $hostname' config.json > config.json.tmp
          mv config.json.tmp config.json
          echo "Updated hostname in configuration to $(hostname)"
        fi

    - description: "Add claude alias to shell configuration"
      command: |
        # Check if claude alias already exists anywhere
        if command -v claude >/dev/null 2>&1 || \
           grep -r "alias claude=" "$HOME/.dotfiles/zsh/" 2>/dev/null | grep -q "claude=" || \
           grep -q "alias claude=" "$HOME/.zshrc" "$HOME/.bashrc" "$HOME/.profile" 2>/dev/null; then
          echo "Claude alias already exists in shell configuration"
        else
          echo "" >> "$HOME/.zshrc"
          echo "# Claude Storage System alias" >> "$HOME/.zshrc"
          echo "alias claude='$HOME/.claude.store/bin/claude-wrapper'" >> "$HOME/.zshrc"
          echo "Claude alias added to .zshrc"
        fi

    - description: "Display installation summary"
      command: |
        echo ""
        echo "üéâ Claude Storage System installed successfully!"
        echo ""
        echo "üìÅ Location: $HOME/.claude.store"
        echo "üîó Symlink: ~/.claude -> ~/.claude.store/user-level"
        echo "‚öôÔ∏è  Mode: $(jq -r '.mode' $HOME/.claude.store/config.json)"
        echo "üñ•Ô∏è  Hostname: $(jq -r '.hostname' $HOME/.claude.store/config.json)"
        echo ""
        echo "Next steps:"
        echo "1. Use 'claude' command as normal - files will be managed automatically"
        echo "2. Use 'claude-wrapper status' to check current status"
        echo "3. Use 'claude-wrapper toggle' to change project management behavior"
        echo ""