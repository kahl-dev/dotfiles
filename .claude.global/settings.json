{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(bun:*)",
      "Bash(cargo:*)",
      "Bash(cat:*)",
      "Bash(chmod:*)",
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(docker:*)",
      "Bash(echo:*)",
      "Bash(eslint:*)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(git blame:*)",
      "Bash(git branch:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git reset:*)",
      "Bash(git show:*)",
      "Bash(git stash:*)",
      "Bash(git status:*)",
      "Bash(git for-each-ref:*)",
      "Bash(git ls-files:*)",
      "Bash(git submodule:*)",
      "Bash(git remote:*)",
      "Bash(go:*)",
      "Bash(grep:*)",
      "Bash(gunzip:*)",
      "Bash(head:*)",
      "Bash(jest:*)",
      "Bash(ln:*)",
      "Bash(ls:*)",
      "Bash(make:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(npx tsc:*)",
      "Bash(npx vue-tsc:*)",
      "Bash(pip:*)",
      "Bash(pnpm:*)",
      "Bash(poetry:*)",
      "Bash(pytest:*)",
      "Bash(python:*)",
      "Bash(rg:*)",
      "Bash(shellcheck:*)",
      "Bash(sort:*)",
      "Bash(tail:*)",
      "Bash(touch:*)",
      "Bash(uniq:*)",
      "Bash(vitest:*)",
      "Bash(wc:*)",
      "Bash(yarn:*)",
      "Bash(just:*)",
      "Bash(uv:*)",
      "Bash(ruff:*)",
      "Bash(black:*)",
      "Bash(mypy:*)",
      "Bash(tsc:*)",
      "Bash(prettier:*)",
      "Bash(pwd:*)",
      "Bash(cd:*)",
      "Bash(which:*)",
      "Bash(tree:*)",
      "Bash(diff:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(cut:*)",
      "Bash(xargs:*)",
      "Bash(parallel:*)",
      "Bash(command:*)",
      "Bash(jq:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(fd:*)",
      "Bash(sd:*)",
      "Bash(pip:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(gh:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(npx:*)",
      "Bash(node -e:*)",
      "Bash(time:*)",
      "Bash(env:*)",
      "Bash(printenv:*)",
      "Bash(basename:*)",
      "Bash(dirname:*)",
      "Bash(realpath:*)",
      "Bash(stat:*)",
      "Bash(file:*)",
      "Bash(nc -z:*)",
      "Bash(curl -s:*)",
      "Bash(curl -f:*)",
      "Bash(wget:*)",
      "Edit",
      "MultiEdit",
      "Glob",
      "Grep",
      "LS",
      "Task",
      "TodoWrite",
      "TodoRead",
      "NotebookEdit",
      "NotebookRead",
      "WebFetch",
      "WebSearch",
      "Write",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__gitlab__search_repositories",
      "mcp__gitlab__get_file_contents",
      "mcp__mcp-nova__memory",
      "mcp__mcp-nova__workflow",
      "mcp__mcp-nova__board",
      "mcp__mcp-nova__relationships",
      "mcp__mcp-nova__analysis",
      "mcp__mcp-nova__project",
      "mcp__mcp-nova__settings",
      "mcp__mcp-nova__quick",
      "mcp__mcp-nova__help",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_handle_dialog",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_file_upload",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_navigate_back",
      "mcp__playwright__browser_navigate_forward",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_drag",
      "mcp__playwright__browser_hover",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_tab_list",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_tab_select",
      "mcp__playwright__browser_tab_close",
      "mcp__playwright__browser_wait_for",
      "mcp__gitlab__search_repositories",
      "mcp__gitlab__get_file_contents",
      "mcp__github__create_or_update_file",
      "mcp__github__search_repositories",
      "mcp__github__get_file_contents",
      "mcp__github__list_commits",
      "mcp__github__list_issues",
      "mcp__github__search_code",
      "mcp__github__search_issues",
      "mcp__github__search_users",
      "mcp__github__get_issue",
      "mcp__github__get_pull_request",
      "mcp__github__list_pull_requests",
      "mcp__jira__atlassianUserInfo",
      "mcp__jira__getAccessibleAtlassianResources",
      "mcp__jira__getConfluenceSpaces",
      "mcp__jira__getConfluencePage",
      "mcp__jira__getPagesInConfluenceSpace",
      "mcp__jira__getConfluencePageAncestors",
      "mcp__jira__getConfluencePageFooterComments",
      "mcp__jira__getConfluencePageInlineComments",
      "mcp__jira__getConfluencePageDescendants",
      "mcp__jira__searchConfluenceUsingCql",
      "mcp__jira__getJiraIssue",
      "mcp__jira__getTransitionsForJiraIssue",
      "mcp__jira__lookupJiraAccountId",
      "mcp__jira__searchJiraIssuesUsingJql",
      "mcp__jira__getJiraIssueRemoteIssueLinks",
      "mcp__jira__getVisibleJiraProjects",
      "mcp__jira__getJiraProjectIssueTypesMetadata",
      "mcp__sentry__whoami",
      "mcp__sentry__find_organizations",
      "mcp__sentry__find_teams",
      "mcp__sentry__find_projects",
      "mcp__sentry__find_releases",
      "mcp__sentry__get_issue_details",
      "mcp__sentry__get_event_attachment",
      "mcp__sentry__update_issue",
      "mcp__sentry__search_events",
      "mcp__sentry__create_team",
      "mcp__sentry__create_project",
      "mcp__sentry__update_project",
      "mcp__sentry__create_dsn",
      "mcp__sentry__find_dsns",
      "mcp__sentry__analyze_issue_with_seer",
      "mcp__sentry__search_docs",
      "mcp__sentry__get_doc",
      "mcp__sentry__search_issues",
      "Supabase-remote - search_docs(*)",
      "Bash(ai-fetch-screenshots:*)",
      "Bash(ai-fetch-jira:*)",
      "Read($HOME/tmp/ai/screenshots/*)",
      "Read($HOME/tmp/ai/*)",
      "Bash(sleep:*)",
      "Bash(tmux:*)"
    ],
    "deny": [
      "Bash(git push --force:*)",
      "Bash(git push -f:*)",
      "Bash(git push:*)",
      "Bash(rm -rf:*)",
      "Bash(sudo rm:*)",
      "Bash(dd:*)",
      "Bash(mkfs:*)",
      "Bash(fdisk:*)",
      "Bash(rm -rf /*)",
      "Bash(sudo:*)",
      "Bash(su:*)",
      "Bash(passwd:*)",
      "Bash(shutdown:*)",
      "Bash(reboot:*)",
      "Bash(halt:*)",
      "Bash(poweroff:*)",
      "Bash(chmod 777:*)",
      "Bash(npm install -g:*)",
      "Bash(pip install --user:*)",
      "Bash(docker run --privileged:*)",
      "Bash(git reset --hard:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run serve:*)",
      "Bash(npm run watch:*)",
      "Read(.env*)",
      "Read(secrets/*)",
      "Read(~/.ssh/*)",
      "Read(~/.aws/*)",
      "Read(/etc/passwd)",
      "Read(/etc/shadow)",
      "Write(.env*)",
      "Write(~/.ssh/*)",
      "Write(~/.aws/*)"
    ],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "~/tmp/ai"
    ]
  },
  "model": "opusplan",
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "~/.claude/hooks/file-type-tracker.sh"
          },
          {
            "type": "command",
            "command": "~/.claude/hooks/smart-lint.sh"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "~/.claude/hooks/notification-handler.sh"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "~/.claude/hooks/enhanced-notify-wrapper.sh"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "~/.claude/hooks/user_prompt_submit.sh"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "~/.claude/statusline.sh",
    "padding": 0
  },
  "feedbackSurveyState": {
    "lastShownTime": 1754119245892
  }
}